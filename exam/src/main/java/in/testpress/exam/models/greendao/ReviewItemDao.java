package in.testpress.exam.models.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REVIEW_ITEM".
*/
public class ReviewItemDao extends AbstractDao<ReviewItem, Long> {

    public static final String TABLENAME = "REVIEW_ITEM";

    /**
     * Properties of entity ReviewItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Index = new Property(1, Integer.class, "index", false, "INDEX");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property SelectedAnswers = new Property(3, String.class, "selectedAnswers", false, "SELECTED_ANSWERS");
        public final static Property Review = new Property(4, Boolean.class, "review", false, "REVIEW");
        public final static Property CommentsCount = new Property(5, Integer.class, "commentsCount", false, "COMMENTS_COUNT");
        public final static Property AttemptId = new Property(6, Long.class, "attemptId", false, "ATTEMPT_ID");
        public final static Property QuestionId = new Property(7, Long.class, "questionId", false, "QUESTION_ID");
    }

    private DaoSession daoSession;

    private final IntegerListConverter selectedAnswersConverter = new IntegerListConverter();
    private Query<ReviewItem> reviewAttempt_ReviewItemsQuery;

    public ReviewItemDao(DaoConfig config) {
        super(config);
    }
    
    public ReviewItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REVIEW_ITEM\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"INDEX\" INTEGER," + // 1: index
                "\"URL\" TEXT," + // 2: url
                "\"SELECTED_ANSWERS\" TEXT," + // 3: selectedAnswers
                "\"REVIEW\" INTEGER," + // 4: review
                "\"COMMENTS_COUNT\" INTEGER," + // 5: commentsCount
                "\"ATTEMPT_ID\" INTEGER," + // 6: attemptId
                "\"QUESTION_ID\" INTEGER);"); // 7: questionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REVIEW_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReviewItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(2, index);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        List<Integer> selectedAnswers = entity.getSelectedAnswers();
        if (selectedAnswers != null) {
            stmt.bindString(4, selectedAnswersConverter.convertToDatabaseValue(selectedAnswers));
        }
 
        Boolean review = entity.getReview();
        if (review != null) {
            stmt.bindLong(5, review ? 1L: 0L);
        }
 
        Integer commentsCount = entity.getCommentsCount();
        if (commentsCount != null) {
            stmt.bindLong(6, commentsCount);
        }
 
        Long attemptId = entity.getAttemptId();
        if (attemptId != null) {
            stmt.bindLong(7, attemptId);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(8, questionId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReviewItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(2, index);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        List<Integer> selectedAnswers = entity.getSelectedAnswers();
        if (selectedAnswers != null) {
            stmt.bindString(4, selectedAnswersConverter.convertToDatabaseValue(selectedAnswers));
        }
 
        Boolean review = entity.getReview();
        if (review != null) {
            stmt.bindLong(5, review ? 1L: 0L);
        }
 
        Integer commentsCount = entity.getCommentsCount();
        if (commentsCount != null) {
            stmt.bindLong(6, commentsCount);
        }
 
        Long attemptId = entity.getAttemptId();
        if (attemptId != null) {
            stmt.bindLong(7, attemptId);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(8, questionId);
        }
    }

    @Override
    protected final void attachEntity(ReviewItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReviewItem readEntity(Cursor cursor, int offset) {
        ReviewItem entity = new ReviewItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // index
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : selectedAnswersConverter.convertToEntityProperty(cursor.getString(offset + 3)), // selectedAnswers
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // review
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // commentsCount
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // attemptId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // questionId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReviewItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSelectedAnswers(cursor.isNull(offset + 3) ? null : selectedAnswersConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setReview(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setCommentsCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAttemptId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setQuestionId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReviewItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReviewItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReviewItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "reviewItems" to-many relationship of ReviewAttempt. */
    public List<ReviewItem> _queryReviewAttempt_ReviewItems(Long attemptId) {
        synchronized (this) {
            if (reviewAttempt_ReviewItemsQuery == null) {
                QueryBuilder<ReviewItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AttemptId.eq(null));
                reviewAttempt_ReviewItemsQuery = queryBuilder.build();
            }
        }
        Query<ReviewItem> query = reviewAttempt_ReviewItemsQuery.forCurrentThread();
        query.setParameter(0, attemptId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getReviewQuestionDao().getAllColumns());
            builder.append(" FROM REVIEW_ITEM T");
            builder.append(" LEFT JOIN REVIEW_QUESTION T0 ON T.\"QUESTION_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ReviewItem loadCurrentDeep(Cursor cursor, boolean lock) {
        ReviewItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ReviewQuestion question = loadCurrentOther(daoSession.getReviewQuestionDao(), cursor, offset);
        entity.setQuestion(question);

        return entity;    
    }

    public ReviewItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ReviewItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ReviewItem> list = new ArrayList<ReviewItem>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ReviewItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ReviewItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
