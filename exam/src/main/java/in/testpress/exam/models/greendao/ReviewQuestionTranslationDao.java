package in.testpress.exam.models.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REVIEW_QUESTION_TRANSLATION".
*/
public class ReviewQuestionTranslationDao extends AbstractDao<ReviewQuestionTranslation, Long> {

    public static final String TABLENAME = "REVIEW_QUESTION_TRANSLATION";

    /**
     * Properties of entity ReviewQuestionTranslation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property QuestionHtml = new Property(1, String.class, "questionHtml", false, "QUESTION_HTML");
        public final static Property Direction = new Property(2, String.class, "direction", false, "DIRECTION");
        public final static Property ExplanationHtml = new Property(3, String.class, "explanationHtml", false, "EXPLANATION_HTML");
        public final static Property Language = new Property(4, String.class, "language", false, "LANGUAGE");
        public final static Property QuestionId = new Property(5, Long.class, "questionId", false, "QUESTION_ID");
    }

    private DaoSession daoSession;

    private Query<ReviewQuestionTranslation> reviewQuestion_TranslationsQuery;

    public ReviewQuestionTranslationDao(DaoConfig config) {
        super(config);
    }
    
    public ReviewQuestionTranslationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REVIEW_QUESTION_TRANSLATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QUESTION_HTML\" TEXT," + // 1: questionHtml
                "\"DIRECTION\" TEXT," + // 2: direction
                "\"EXPLANATION_HTML\" TEXT," + // 3: explanationHtml
                "\"LANGUAGE\" TEXT," + // 4: language
                "\"QUESTION_ID\" INTEGER);"); // 5: questionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REVIEW_QUESTION_TRANSLATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReviewQuestionTranslation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String questionHtml = entity.getQuestionHtml();
        if (questionHtml != null) {
            stmt.bindString(2, questionHtml);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(3, direction);
        }
 
        String explanationHtml = entity.getExplanationHtml();
        if (explanationHtml != null) {
            stmt.bindString(4, explanationHtml);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(5, language);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(6, questionId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReviewQuestionTranslation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String questionHtml = entity.getQuestionHtml();
        if (questionHtml != null) {
            stmt.bindString(2, questionHtml);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(3, direction);
        }
 
        String explanationHtml = entity.getExplanationHtml();
        if (explanationHtml != null) {
            stmt.bindString(4, explanationHtml);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(5, language);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(6, questionId);
        }
    }

    @Override
    protected final void attachEntity(ReviewQuestionTranslation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReviewQuestionTranslation readEntity(Cursor cursor, int offset) {
        ReviewQuestionTranslation entity = new ReviewQuestionTranslation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // questionHtml
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // direction
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // explanationHtml
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // language
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // questionId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReviewQuestionTranslation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestionHtml(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDirection(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExplanationHtml(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLanguage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuestionId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReviewQuestionTranslation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReviewQuestionTranslation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReviewQuestionTranslation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "translations" to-many relationship of ReviewQuestion. */
    public List<ReviewQuestionTranslation> _queryReviewQuestion_Translations(Long questionId) {
        synchronized (this) {
            if (reviewQuestion_TranslationsQuery == null) {
                QueryBuilder<ReviewQuestionTranslation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.QuestionId.eq(null));
                reviewQuestion_TranslationsQuery = queryBuilder.build();
            }
        }
        Query<ReviewQuestionTranslation> query = reviewQuestion_TranslationsQuery.forCurrentThread();
        query.setParameter(0, questionId);
        return query.list();
    }

}
