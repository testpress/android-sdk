package in.testpress.exam.models.greendao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import in.testpress.exam.models.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "REVIEW_ATTEMPT".
 */
@Entity(active = true)
public class ReviewAttempt {

    @Id
    private Long id;
    private Integer totalQuestions;
    private String score;
    private String rank;
    private String reviewUrl;
    private Integer correctCount;
    private Integer incorrectCount;
    private String timeTaken;
    private String percentile;
    private Integer speed;
    private Integer accuracy;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ReviewAttemptDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "attemptId")
    })
    private List<ReviewItem> reviewItems;

    @Generated
    public ReviewAttempt() {
    }

    public ReviewAttempt(Long id) {
        this.id = id;
    }

    @Generated
    public ReviewAttempt(Long id, Integer totalQuestions, String score, String rank, String reviewUrl, Integer correctCount, Integer incorrectCount, String timeTaken, String percentile, Integer speed, Integer accuracy) {
        this.id = id;
        this.totalQuestions = totalQuestions;
        this.score = score;
        this.rank = rank;
        this.reviewUrl = reviewUrl;
        this.correctCount = correctCount;
        this.incorrectCount = incorrectCount;
        this.timeTaken = timeTaken;
        this.percentile = percentile;
        this.speed = speed;
        this.accuracy = accuracy;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReviewAttemptDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getTotalQuestions() {
        return totalQuestions;
    }

    public void setTotalQuestions(Integer totalQuestions) {
        this.totalQuestions = totalQuestions;
    }

    public String getScore() {
        return score;
    }

    public void setScore(String score) {
        this.score = score;
    }

    public String getRank() {
        return rank;
    }

    public void setRank(String rank) {
        this.rank = rank;
    }

    public String getReviewUrl() {
        return reviewUrl;
    }

    public void setReviewUrl(String reviewUrl) {
        this.reviewUrl = reviewUrl;
    }

    public Integer getCorrectCount() {
        return correctCount;
    }

    public void setCorrectCount(Integer correctCount) {
        this.correctCount = correctCount;
    }

    public Integer getIncorrectCount() {
        return incorrectCount;
    }

    public void setIncorrectCount(Integer incorrectCount) {
        this.incorrectCount = incorrectCount;
    }

    public String getTimeTaken() {
        return timeTaken;
    }

    public void setTimeTaken(String timeTaken) {
        this.timeTaken = timeTaken;
    }

    public String getPercentile() {
        return percentile;
    }

    public void setPercentile(String percentile) {
        this.percentile = percentile;
    }

    public Integer getSpeed() {
        return speed;
    }

    public void setSpeed(Integer speed) {
        this.speed = speed;
    }

    public Integer getAccuracy() {
        return accuracy;
    }

    public void setAccuracy(Integer accuracy) {
        this.accuracy = accuracy;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<ReviewItem> getReviewItems() {
        if (reviewItems == null) {
            __throwIfDetached();
            ReviewItemDao targetDao = daoSession.getReviewItemDao();
            List<ReviewItem> reviewItemsNew = targetDao._queryReviewAttempt_ReviewItems(id);
            synchronized (this) {
                if(reviewItems == null) {
                    reviewItems = reviewItemsNew;
                }
            }
        }
        return reviewItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetReviewItems() {
        reviewItems = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
