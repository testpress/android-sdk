package in.testpress.exam.models.greendao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import in.testpress.exam.models.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "REVIEW_QUESTION".
 */
@Entity(active = true)
public class ReviewQuestion {

    @Id
    private Long id;
    private String questionHtml;
    private String direction;
    private String subject;
    private String explanationHtml;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ReviewQuestionDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "questionId")
    })
    private List<ReviewAnswer> answers;

    @Generated
    public ReviewQuestion() {
    }

    public ReviewQuestion(Long id) {
        this.id = id;
    }

    @Generated
    public ReviewQuestion(Long id, String questionHtml, String direction, String subject, String explanationHtml) {
        this.id = id;
        this.questionHtml = questionHtml;
        this.direction = direction;
        this.subject = subject;
        this.explanationHtml = explanationHtml;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReviewQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getQuestionHtml() {
        return questionHtml;
    }

    public void setQuestionHtml(String questionHtml) {
        this.questionHtml = questionHtml;
    }

    public String getDirection() {
        return direction;
    }

    public void setDirection(String direction) {
        this.direction = direction;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public String getExplanationHtml() {
        return explanationHtml;
    }

    public void setExplanationHtml(String explanationHtml) {
        this.explanationHtml = explanationHtml;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<ReviewAnswer> getAnswers() {
        if (answers == null) {
            __throwIfDetached();
            ReviewAnswerDao targetDao = daoSession.getReviewAnswerDao();
            List<ReviewAnswer> answersNew = targetDao._queryReviewQuestion_Answers(id);
            synchronized (this) {
                if(answers == null) {
                    answers = answersNew;
                }
            }
        }
        return answers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetAnswers() {
        answers = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
