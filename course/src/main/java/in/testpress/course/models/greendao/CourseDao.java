package in.testpress.course.models.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE".
*/
public class CourseDao extends AbstractDao<Course, Long> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Modified = new Property(5, String.class, "modified", false, "MODIFIED");
        public final static Property ModifiedDate = new Property(6, Long.class, "modifiedDate", false, "MODIFIED_DATE");
        public final static Property ContentsUrl = new Property(7, String.class, "contentsUrl", false, "CONTENTS_URL");
        public final static Property ChaptersUrl = new Property(8, String.class, "chaptersUrl", false, "CHAPTERS_URL");
        public final static Property Slug = new Property(9, String.class, "slug", false, "SLUG");
        public final static Property TrophiesCount = new Property(10, Integer.class, "trophiesCount", false, "TROPHIES_COUNT");
        public final static Property ChaptersCount = new Property(11, Integer.class, "chaptersCount", false, "CHAPTERS_COUNT");
        public final static Property ContentsCount = new Property(12, Integer.class, "contentsCount", false, "CONTENTS_COUNT");
    }


    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"TITLE\" TEXT," + // 2: title
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"IMAGE\" TEXT," + // 4: image
                "\"MODIFIED\" TEXT," + // 5: modified
                "\"MODIFIED_DATE\" INTEGER," + // 6: modifiedDate
                "\"CONTENTS_URL\" TEXT," + // 7: contentsUrl
                "\"CHAPTERS_URL\" TEXT," + // 8: chaptersUrl
                "\"SLUG\" TEXT," + // 9: slug
                "\"TROPHIES_COUNT\" INTEGER," + // 10: trophiesCount
                "\"CHAPTERS_COUNT\" INTEGER," + // 11: chaptersCount
                "\"CONTENTS_COUNT\" INTEGER);"); // 12: contentsCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String modified = entity.getModified();
        if (modified != null) {
            stmt.bindString(6, modified);
        }
 
        Long modifiedDate = entity.getModifiedDate();
        if (modifiedDate != null) {
            stmt.bindLong(7, modifiedDate);
        }
 
        String contentsUrl = entity.getContentsUrl();
        if (contentsUrl != null) {
            stmt.bindString(8, contentsUrl);
        }
 
        String chaptersUrl = entity.getChaptersUrl();
        if (chaptersUrl != null) {
            stmt.bindString(9, chaptersUrl);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(10, slug);
        }
 
        Integer trophiesCount = entity.getTrophiesCount();
        if (trophiesCount != null) {
            stmt.bindLong(11, trophiesCount);
        }
 
        Integer chaptersCount = entity.getChaptersCount();
        if (chaptersCount != null) {
            stmt.bindLong(12, chaptersCount);
        }
 
        Integer contentsCount = entity.getContentsCount();
        if (contentsCount != null) {
            stmt.bindLong(13, contentsCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String modified = entity.getModified();
        if (modified != null) {
            stmt.bindString(6, modified);
        }
 
        Long modifiedDate = entity.getModifiedDate();
        if (modifiedDate != null) {
            stmt.bindLong(7, modifiedDate);
        }
 
        String contentsUrl = entity.getContentsUrl();
        if (contentsUrl != null) {
            stmt.bindString(8, contentsUrl);
        }
 
        String chaptersUrl = entity.getChaptersUrl();
        if (chaptersUrl != null) {
            stmt.bindString(9, chaptersUrl);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(10, slug);
        }
 
        Integer trophiesCount = entity.getTrophiesCount();
        if (trophiesCount != null) {
            stmt.bindLong(11, trophiesCount);
        }
 
        Integer chaptersCount = entity.getChaptersCount();
        if (chaptersCount != null) {
            stmt.bindLong(12, chaptersCount);
        }
 
        Integer contentsCount = entity.getContentsCount();
        if (contentsCount != null) {
            stmt.bindLong(13, contentsCount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // modified
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // modifiedDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contentsUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // chaptersUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // slug
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // trophiesCount
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // chaptersCount
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // contentsCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setModified(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setModifiedDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setContentsUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChaptersUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSlug(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTrophiesCount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setChaptersCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setContentsCount(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Course entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Course entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Course entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
