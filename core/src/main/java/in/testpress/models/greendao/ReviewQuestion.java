package in.testpress.models.greendao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import in.testpress.models.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

import in.testpress.util.IntegerList;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "REVIEW_QUESTION".
 */
@Entity(active = true)
public class ReviewQuestion {

    @Id
    private Long id;
    private String questionHtml;
    private String direction;
    private String subject;
    private String explanationHtml;
    private String type;
    private String commentsUrl;
    private String language;
    private Float percentageGotCorrect;
    private Long directionId;
    private Long subjectId;

    @Convert(converter = in.testpress.util.IntegerListConverter.class, columnType = String.class)
    private IntegerList answerIds;

    @Convert(converter = in.testpress.util.IntegerListConverter.class, columnType = String.class)
    private IntegerList translationIds;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ReviewQuestionDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "questionId")
    })
    private List<ReviewAnswer> answers;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "questionId")
    })
    private List<ReviewQuestionTranslation> translations;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public ReviewQuestion() {
    }

    public ReviewQuestion(Long id) {
        this.id = id;
    }

    @Generated
    public ReviewQuestion(Long id, String questionHtml, String direction, String subject, String explanationHtml, String type, String commentsUrl, String language, Float percentageGotCorrect, Long directionId, Long subjectId, IntegerList answerIds, IntegerList translationIds) {
        this.id = id;
        this.questionHtml = questionHtml;
        this.direction = direction;
        this.subject = subject;
        this.explanationHtml = explanationHtml;
        this.type = type;
        this.commentsUrl = commentsUrl;
        this.language = language;
        this.percentageGotCorrect = percentageGotCorrect;
        this.directionId = directionId;
        this.subjectId = subjectId;
        this.answerIds = answerIds;
        this.translationIds = translationIds;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReviewQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getQuestionHtml() {
        return questionHtml;
    }

    public void setQuestionHtml(String questionHtml) {
        this.questionHtml = questionHtml;
    }

    public String getDirection() {
        return direction;
    }

    public void setDirection(String direction) {
        this.direction = direction;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public String getExplanationHtml() {
        return explanationHtml;
    }

    public void setExplanationHtml(String explanationHtml) {
        this.explanationHtml = explanationHtml;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getCommentsUrl() {
        return commentsUrl;
    }

    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        this.language = language;
    }

    public Float getPercentageGotCorrect() {
        return percentageGotCorrect;
    }

    public void setPercentageGotCorrect(Float percentageGotCorrect) {
        this.percentageGotCorrect = percentageGotCorrect;
    }

    public Long getDirectionId() {
        return directionId;
    }

    public void setDirectionId(Long directionId) {
        this.directionId = directionId;
    }

    public Long getSubjectId() {
        return subjectId;
    }

    public void setSubjectId(Long subjectId) {
        this.subjectId = subjectId;
    }

    public IntegerList getAnswerIds() {
        return answerIds;
    }

    public void setAnswerIds(IntegerList answerIds) {
        this.answerIds = answerIds;
    }

    public IntegerList getTranslationIds() {
        return translationIds;
    }

    public void setTranslationIds(IntegerList translationIds) {
        this.translationIds = translationIds;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<ReviewAnswer> getAnswers() {
        if (answers == null) {
            __throwIfDetached();
            ReviewAnswerDao targetDao = daoSession.getReviewAnswerDao();
            List<ReviewAnswer> answersNew = targetDao._queryReviewQuestion_Answers(id);
            synchronized (this) {
                if(answers == null) {
                    answers = answersNew;
                }
            }
        }
        return answers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetAnswers() {
        answers = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<ReviewQuestionTranslation> getTranslations() {
        if (translations == null) {
            __throwIfDetached();
            ReviewQuestionTranslationDao targetDao = daoSession.getReviewQuestionTranslationDao();
            List<ReviewQuestionTranslation> translationsNew = targetDao._queryReviewQuestion_Translations(id);
            synchronized (this) {
                if(translations == null) {
                    translations = translationsNew;
                }
            }
        }
        return translations;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTranslations() {
        translations = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    public String getSubjectFromDB() {
        if (daoSession == null || subject != null || subjectId == null) {
            return subject;
        }
        List<Subject> subjects = daoSession.getSubjectDao().queryBuilder()
                .where(SubjectDao.Properties.Id.eq(subjectId))
                .list();

        if (subjects.isEmpty()) {
            return null;
        }
        return subjects.get(0).getName();
    }

    public String getDirectionFromDB() {
        if (daoSession == null || direction != null || directionId == null) {

            return direction;
        }
        List<Direction> directions = daoSession.getDirectionDao().queryBuilder()
                .where(DirectionDao.Properties.Id.eq(directionId))
                .list();

        if (directions.isEmpty()) {
            return null;
        }
        return directions.get(0).getHtml();
    }
    // KEEP METHODS END

}
