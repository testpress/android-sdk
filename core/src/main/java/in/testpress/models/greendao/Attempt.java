package in.testpress.models.greendao;

import org.greenrobot.greendao.annotation.*;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.annotation.SuppressLint;
import android.os.Parcel;
import android.os.Parcelable;

import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
// KEEP INCLUDES END

/**
 * Entity mapped to table "ATTEMPT".
 */
@Entity
public class Attempt implements android.os.Parcelable {
    private String url;

    @Id
    private Long id;
    private String date;
    private Integer totalQuestions;
    private String score;
    private String rank;
    private String maxRank;
    private String reviewUrl;
    private String questionsUrl;
    private Integer correctCount;
    private Integer incorrectCount;
    private String lastStartedTime;
    private String remainingTime;
    private String timeTaken;
    private String state;
    private String percentile;
    private Integer speed;
    private Integer accuracy;
    private Long contentId;
    private String percentage;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Attempt() {
    }

    public Attempt(Long id) {
        this.id = id;
    }

    @Generated
    public Attempt(String url, Long id, String date, Integer totalQuestions, String score, String rank, String maxRank, String reviewUrl, String questionsUrl, Integer correctCount, Integer incorrectCount, String lastStartedTime, String remainingTime, String timeTaken, String state, String percentile, Integer speed, Integer accuracy, Long contentId, String percentage) {
        this.url = url;
        this.id = id;
        this.date = date;
        this.totalQuestions = totalQuestions;
        this.score = score;
        this.rank = rank;
        this.maxRank = maxRank;
        this.reviewUrl = reviewUrl;
        this.questionsUrl = questionsUrl;
        this.correctCount = correctCount;
        this.incorrectCount = incorrectCount;
        this.lastStartedTime = lastStartedTime;
        this.remainingTime = remainingTime;
        this.timeTaken = timeTaken;
        this.state = state;
        this.percentile = percentile;
        this.speed = speed;
        this.accuracy = accuracy;
        this.contentId = contentId;
        this.percentage = percentage;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public Integer getTotalQuestions() {
        return totalQuestions;
    }

    public void setTotalQuestions(Integer totalQuestions) {
        this.totalQuestions = totalQuestions;
    }

    public String getScore() {
        return score;
    }

    public void setScore(String score) {
        this.score = score;
    }

    public String getRank() {
        return rank;
    }

    public void setRank(String rank) {
        this.rank = rank;
    }

    public String getMaxRank() {
        return maxRank;
    }

    public void setMaxRank(String maxRank) {
        this.maxRank = maxRank;
    }

    public String getReviewUrl() {
        return reviewUrl;
    }

    public void setReviewUrl(String reviewUrl) {
        this.reviewUrl = reviewUrl;
    }

    public String getQuestionsUrl() {
        return questionsUrl;
    }

    public void setQuestionsUrl(String questionsUrl) {
        this.questionsUrl = questionsUrl;
    }

    public Integer getCorrectCount() {
        return correctCount;
    }

    public void setCorrectCount(Integer correctCount) {
        this.correctCount = correctCount;
    }

    public Integer getIncorrectCount() {
        return incorrectCount;
    }

    public void setIncorrectCount(Integer incorrectCount) {
        this.incorrectCount = incorrectCount;
    }

    public String getLastStartedTime() {
        return lastStartedTime;
    }

    public void setLastStartedTime(String lastStartedTime) {
        this.lastStartedTime = lastStartedTime;
    }

    public String getRemainingTime() {
        return remainingTime;
    }

    public void setRemainingTime(String remainingTime) {
        this.remainingTime = remainingTime;
    }

    public String getTimeTaken() {
        return timeTaken;
    }

    public void setTimeTaken(String timeTaken) {
        this.timeTaken = timeTaken;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getPercentile() {
        return percentile;
    }

    public void setPercentile(String percentile) {
        this.percentile = percentile;
    }

    public Integer getSpeed() {
        return speed;
    }

    public void setSpeed(Integer speed) {
        this.speed = speed;
    }

    public Integer getAccuracy() {
        return accuracy;
    }

    public void setAccuracy(Integer accuracy) {
        this.accuracy = accuracy;
    }

    public Long getContentId() {
        return contentId;
    }

    public void setContentId(Long contentId) {
        this.contentId = contentId;
    }

    public String getPercentage() {
        return percentage;
    }

    public void setPercentage(String percentage) {
        this.percentage = percentage;
    }

    // KEEP METHODS - put your custom methods here

    // Parcelling part

    protected Attempt(Parcel in) {
        url = in.readString();
        id = in.readByte() == 0x00 ? null : in.readLong();
        date = in.readString();
        totalQuestions = in.readByte() == 0x00 ? null : in.readInt();
        score = in.readString();
        rank = in.readString();
        maxRank = in.readString();
        reviewUrl = in.readString();
        questionsUrl = in.readString();
        correctCount = in.readByte() == 0x00 ? null : in.readInt();
        incorrectCount = in.readByte() == 0x00 ? null : in.readInt();
        lastStartedTime = in.readString();
        remainingTime = in.readString();
        timeTaken = in.readString();
        state = in.readString();
        percentile = in.readString();
        speed = in.readByte() == 0x00 ? null : in.readInt();
        accuracy = in.readByte() == 0x00 ? null : in.readInt();
        contentId = in.readByte() == 0x00 ? null : in.readLong();
        percentage = in.readString();
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(url);
        if (id == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeLong(id);
        }
        dest.writeString(date);
        if (totalQuestions == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeInt(totalQuestions);
        }
        dest.writeString(score);
        dest.writeString(rank);
        dest.writeString(maxRank);
        dest.writeString(reviewUrl);
        dest.writeString(questionsUrl);
        if (correctCount == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeInt(correctCount);
        }
        if (incorrectCount == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeInt(incorrectCount);
        }
        dest.writeString(lastStartedTime);
        dest.writeString(remainingTime);
        dest.writeString(timeTaken);
        dest.writeString(state);
        dest.writeString(percentile);
        if (speed == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeInt(speed);
        }
        if (accuracy == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeInt(accuracy);
        }
        if (contentId == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeLong(contentId);
        }
        dest.writeString(percentage);
    }

    @SuppressWarnings("unused")
    public static final Parcelable.Creator<Attempt> CREATOR = new Parcelable.Creator<Attempt>() {
        @Override
        public Attempt createFromParcel(Parcel in) {
            return new Attempt(in);
        }

        @Override
        public Attempt[] newArray(int size) {
            return new Attempt[size];
        }
    };

    public ReviewAttempt getReviewAttempt() {
        return new ReviewAttempt(getId().longValue(), getTotalQuestions(), getScore(), getRank(),
                getReviewUrl(), getCorrectCount(), getIncorrectCount(), getTimeTaken(),
                getPercentile(), getSpeed(), getAccuracy());
    }

    public String getQuestionsUrlFrag() {
        try {
            URL url = new URL(questionsUrl);
            return url.getFile().substring(1);
        } catch (MalformedURLException e) {
            return null;
        }
    }

    @SuppressLint("SimpleDateFormat")
    public String formatDate(String inputString) {
        Date date = null;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        try {
            date = simpleDateFormat.parse(inputString);
            DateFormat dateformat = DateFormat.getDateInstance();
            return dateformat.format(date);
        } catch (ParseException e) {
        }
        return null;
    }

    public String getShortDate() {
        return formatShortDate(date);
    }

    @SuppressLint("SimpleDateFormat")
    public String formatShortDate(String inputString) {
        Date date = null;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        try {
            date = simpleDateFormat.parse(inputString);
            simpleDateFormat = new SimpleDateFormat("dd MMM");
            String dateMonth = simpleDateFormat.format(date);
            simpleDateFormat = new SimpleDateFormat("yy");
            String year = simpleDateFormat.format(date);
            return dateMonth + " '" + year ;
        } catch (ParseException e) {
        }
        return null;
    }

    public String getUrlFrag() {
        try {
            URL fragUrl = new URL(url);
            return fragUrl.getFile().substring(1);
        } catch (Exception e) {
            return null;
        }
    }

    public String getStartUrlFrag() {
        return getUrlFrag() + "start/";
    }

    public String getEndUrlFrag() {
        return getUrlFrag() + "end/";
    }

    public String getHeartBeatUrlFrag() {
        return getUrlFrag() + "heartbeat/";
    }
    // KEEP METHODS END

}
