package in.testpress.models.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import in.testpress.util.IntegerList;
import in.testpress.util.IntegerListConverter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION".
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property QuestionHtml = new Property(1, String.class, "questionHtml", false, "QUESTION_HTML");
        public final static Property DirectionHtml = new Property(2, String.class, "directionHtml", false, "DIRECTION_HTML");
        public final static Property ParentId = new Property(3, Long.class, "parentId", false, "PARENT_ID");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Language = new Property(5, String.class, "language", false, "LANGUAGE");
        public final static Property ExplanationHtml = new Property(6, String.class, "explanationHtml", false, "EXPLANATION_HTML");
        public final static Property CommentsUrl = new Property(7, String.class, "commentsUrl", false, "COMMENTS_URL");
        public final static Property AnswerIds = new Property(8, String.class, "answerIds", false, "ANSWER_IDS");
        public final static Property DirectionId = new Property(9, Long.class, "directionId", false, "DIRECTION_ID");
    }

    private DaoSession daoSession;

    private final IntegerListConverter answerIdsConverter = new IntegerListConverter();

    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"QUESTION_HTML\" TEXT," + // 1: questionHtml
                "\"DIRECTION_HTML\" TEXT," + // 2: directionHtml
                "\"PARENT_ID\" INTEGER," + // 3: parentId
                "\"TYPE\" TEXT," + // 4: type
                "\"LANGUAGE\" TEXT," + // 5: language
                "\"EXPLANATION_HTML\" TEXT," + // 6: explanationHtml
                "\"COMMENTS_URL\" TEXT," + // 7: commentsUrl
                "\"ANSWER_IDS\" TEXT," + // 8: answerIds
                "\"DIRECTION_ID\" INTEGER);"); // 9: directionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String questionHtml = entity.getQuestionHtml();
        if (questionHtml != null) {
            stmt.bindString(2, questionHtml);
        }
 
        String directionHtml = entity.getDirectionHtml();
        if (directionHtml != null) {
            stmt.bindString(3, directionHtml);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(4, parentId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(6, language);
        }
 
        String explanationHtml = entity.getExplanationHtml();
        if (explanationHtml != null) {
            stmt.bindString(7, explanationHtml);
        }
 
        String commentsUrl = entity.getCommentsUrl();
        if (commentsUrl != null) {
            stmt.bindString(8, commentsUrl);
        }
 
        IntegerList answerIds = entity.getAnswerIds();
        if (answerIds != null) {
            stmt.bindString(9, answerIdsConverter.convertToDatabaseValue(answerIds));
        }
 
        Long directionId = entity.getDirectionId();
        if (directionId != null) {
            stmt.bindLong(10, directionId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String questionHtml = entity.getQuestionHtml();
        if (questionHtml != null) {
            stmt.bindString(2, questionHtml);
        }
 
        String directionHtml = entity.getDirectionHtml();
        if (directionHtml != null) {
            stmt.bindString(3, directionHtml);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(4, parentId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(6, language);
        }
 
        String explanationHtml = entity.getExplanationHtml();
        if (explanationHtml != null) {
            stmt.bindString(7, explanationHtml);
        }
 
        String commentsUrl = entity.getCommentsUrl();
        if (commentsUrl != null) {
            stmt.bindString(8, commentsUrl);
        }
 
        IntegerList answerIds = entity.getAnswerIds();
        if (answerIds != null) {
            stmt.bindString(9, answerIdsConverter.convertToDatabaseValue(answerIds));
        }
 
        Long directionId = entity.getDirectionId();
        if (directionId != null) {
            stmt.bindLong(10, directionId);
        }
    }

    @Override
    protected final void attachEntity(Question entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // questionHtml
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // directionHtml
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // parentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // language
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // explanationHtml
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // commentsUrl
            cursor.isNull(offset + 8) ? null : answerIdsConverter.convertToEntityProperty(cursor.getString(offset + 8)), // answerIds
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // directionId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestionHtml(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDirectionHtml(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParentId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLanguage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExplanationHtml(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCommentsUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAnswerIds(cursor.isNull(offset + 8) ? null : answerIdsConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setDirectionId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Question entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDirectionDao().getAllColumns());
            builder.append(" FROM QUESTION T");
            builder.append(" LEFT JOIN DIRECTION T0 ON T.\"DIRECTION_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Question loadCurrentDeep(Cursor cursor, boolean lock) {
        Question entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Direction direction = loadCurrentOther(daoSession.getDirectionDao(), cursor, offset);
        entity.setDirection(direction);

        return entity;    
    }

    public Question loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Question> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Question> list = new ArrayList<Question>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Question> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Question> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
