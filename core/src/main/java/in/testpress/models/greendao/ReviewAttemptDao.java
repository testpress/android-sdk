package in.testpress.models.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REVIEW_ATTEMPT".
*/
public class ReviewAttemptDao extends AbstractDao<ReviewAttempt, Long> {

    public static final String TABLENAME = "REVIEW_ATTEMPT";

    /**
     * Properties of entity ReviewAttempt.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property TotalQuestions = new Property(1, Integer.class, "totalQuestions", false, "TOTAL_QUESTIONS");
        public final static Property Score = new Property(2, String.class, "score", false, "SCORE");
        public final static Property Rank = new Property(3, String.class, "rank", false, "RANK");
        public final static Property ReviewUrl = new Property(4, String.class, "reviewUrl", false, "REVIEW_URL");
        public final static Property CorrectCount = new Property(5, Integer.class, "correctCount", false, "CORRECT_COUNT");
        public final static Property IncorrectCount = new Property(6, Integer.class, "incorrectCount", false, "INCORRECT_COUNT");
        public final static Property TimeTaken = new Property(7, String.class, "timeTaken", false, "TIME_TAKEN");
        public final static Property Percentile = new Property(8, String.class, "percentile", false, "PERCENTILE");
        public final static Property Speed = new Property(9, Integer.class, "speed", false, "SPEED");
        public final static Property Accuracy = new Property(10, Integer.class, "accuracy", false, "ACCURACY");
    }

    private DaoSession daoSession;


    public ReviewAttemptDao(DaoConfig config) {
        super(config);
    }
    
    public ReviewAttemptDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REVIEW_ATTEMPT\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TOTAL_QUESTIONS\" INTEGER," + // 1: totalQuestions
                "\"SCORE\" TEXT," + // 2: score
                "\"RANK\" TEXT," + // 3: rank
                "\"REVIEW_URL\" TEXT," + // 4: reviewUrl
                "\"CORRECT_COUNT\" INTEGER," + // 5: correctCount
                "\"INCORRECT_COUNT\" INTEGER," + // 6: incorrectCount
                "\"TIME_TAKEN\" TEXT," + // 7: timeTaken
                "\"PERCENTILE\" TEXT," + // 8: percentile
                "\"SPEED\" INTEGER," + // 9: speed
                "\"ACCURACY\" INTEGER);"); // 10: accuracy
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REVIEW_ATTEMPT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReviewAttempt entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer totalQuestions = entity.getTotalQuestions();
        if (totalQuestions != null) {
            stmt.bindLong(2, totalQuestions);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(3, score);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(4, rank);
        }
 
        String reviewUrl = entity.getReviewUrl();
        if (reviewUrl != null) {
            stmt.bindString(5, reviewUrl);
        }
 
        Integer correctCount = entity.getCorrectCount();
        if (correctCount != null) {
            stmt.bindLong(6, correctCount);
        }
 
        Integer incorrectCount = entity.getIncorrectCount();
        if (incorrectCount != null) {
            stmt.bindLong(7, incorrectCount);
        }
 
        String timeTaken = entity.getTimeTaken();
        if (timeTaken != null) {
            stmt.bindString(8, timeTaken);
        }
 
        String percentile = entity.getPercentile();
        if (percentile != null) {
            stmt.bindString(9, percentile);
        }
 
        Integer speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindLong(10, speed);
        }
 
        Integer accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindLong(11, accuracy);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReviewAttempt entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer totalQuestions = entity.getTotalQuestions();
        if (totalQuestions != null) {
            stmt.bindLong(2, totalQuestions);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(3, score);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(4, rank);
        }
 
        String reviewUrl = entity.getReviewUrl();
        if (reviewUrl != null) {
            stmt.bindString(5, reviewUrl);
        }
 
        Integer correctCount = entity.getCorrectCount();
        if (correctCount != null) {
            stmt.bindLong(6, correctCount);
        }
 
        Integer incorrectCount = entity.getIncorrectCount();
        if (incorrectCount != null) {
            stmt.bindLong(7, incorrectCount);
        }
 
        String timeTaken = entity.getTimeTaken();
        if (timeTaken != null) {
            stmt.bindString(8, timeTaken);
        }
 
        String percentile = entity.getPercentile();
        if (percentile != null) {
            stmt.bindString(9, percentile);
        }
 
        Integer speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindLong(10, speed);
        }
 
        Integer accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindLong(11, accuracy);
        }
    }

    @Override
    protected final void attachEntity(ReviewAttempt entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReviewAttempt readEntity(Cursor cursor, int offset) {
        ReviewAttempt entity = new ReviewAttempt( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // totalQuestions
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // score
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rank
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // reviewUrl
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // correctCount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // incorrectCount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timeTaken
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // percentile
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // speed
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // accuracy
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReviewAttempt entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotalQuestions(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setScore(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRank(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReviewUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCorrectCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIncorrectCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTimeTaken(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPercentile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSpeed(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setAccuracy(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReviewAttempt entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReviewAttempt entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReviewAttempt entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
