package in.testpress.models.greendao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import in.testpress.models.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

import in.testpress.util.IntegerList;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "QUESTION".
 */
@Entity(active = true)
public class Question {

    @Id
    private Long id;
    private String questionHtml;
    private String directionHtml;
    private Long parentId;
    private String type;
    private String language;
    private String explanationHtml;
    private String commentsUrl;
    private String percentageGotCorrect;

    @Convert(converter = in.testpress.util.IntegerListConverter.class, columnType = String.class)
    private IntegerList answerIds;
    private Long directionId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient QuestionDao myDao;

    @ToOne(joinProperty = "directionId")
    private Direction direction;

    @Generated
    private transient Long direction__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "questionId")
    })
    private List<Answer> answers;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Question() {
    }

    public Question(Long id) {
        this.id = id;
    }

    @Generated
    public Question(Long id, String questionHtml, String directionHtml, Long parentId, String type, String language, String explanationHtml, String commentsUrl, String percentageGotCorrect, IntegerList answerIds, Long directionId) {
        this.id = id;
        this.questionHtml = questionHtml;
        this.directionHtml = directionHtml;
        this.parentId = parentId;
        this.type = type;
        this.language = language;
        this.explanationHtml = explanationHtml;
        this.commentsUrl = commentsUrl;
        this.percentageGotCorrect = percentageGotCorrect;
        this.answerIds = answerIds;
        this.directionId = directionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getQuestionHtml() {
        return questionHtml;
    }

    public void setQuestionHtml(String questionHtml) {
        this.questionHtml = questionHtml;
    }

    public String getDirectionHtml() {
        return directionHtml;
    }

    public void setDirectionHtml(String directionHtml) {
        this.directionHtml = directionHtml;
    }

    public Long getParentId() {
        return parentId;
    }

    public void setParentId(Long parentId) {
        this.parentId = parentId;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        this.language = language;
    }

    public String getExplanationHtml() {
        return explanationHtml;
    }

    public void setExplanationHtml(String explanationHtml) {
        this.explanationHtml = explanationHtml;
    }

    public String getCommentsUrl() {
        return commentsUrl;
    }

    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    public String getPercentageGotCorrect() {
        return percentageGotCorrect;
    }

    public void setPercentageGotCorrect(String percentageGotCorrect) {
        this.percentageGotCorrect = percentageGotCorrect;
    }

    public IntegerList getAnswerIds() {
        return answerIds;
    }

    public void setAnswerIds(IntegerList answerIds) {
        this.answerIds = answerIds;
    }

    public Long getDirectionId() {
        return directionId;
    }

    public void setDirectionId(Long directionId) {
        this.directionId = directionId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Direction getDirection() {
        Long __key = this.directionId;
        if (direction__resolvedKey == null || !direction__resolvedKey.equals(__key)) {
            __throwIfDetached();
            DirectionDao targetDao = daoSession.getDirectionDao();
            Direction directionNew = targetDao.load(__key);
            synchronized (this) {
                direction = directionNew;
            	direction__resolvedKey = __key;
            }
        }
        return direction;
    }

    @Generated
    public void setDirection(Direction direction) {
        synchronized (this) {
            this.direction = direction;
            directionId = direction == null ? null : direction.getId();
            direction__resolvedKey = directionId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Answer> getAnswers() {
        if (answers == null) {
            __throwIfDetached();
            AnswerDao targetDao = daoSession.getAnswerDao();
            List<Answer> answersNew = targetDao._queryQuestion_Answers(id);
            synchronized (this) {
                if(answers == null) {
                    answers = answersNew;
                }
            }
        }
        return answers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetAnswers() {
        answers = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
