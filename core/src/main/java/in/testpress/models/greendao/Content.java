package in.testpress.models.greendao;

import org.greenrobot.greendao.annotation.*;

import in.testpress.models.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.os.Parcel;
import android.os.Parcelable;
// KEEP INCLUDES END

/**
 * Entity mapped to table "CONTENT".
 */
@Entity(active = true)
public class Content implements android.os.Parcelable {
    public Integer order;
    private String htmlContentTitle;
    private String htmlContentUrl;
    private String url;
    private String attemptsUrl;
    public Integer chapterId;
    private String chapterSlug;
    private String chapterUrl;

    @Id
    private Long id;
    private String name;
    private String image;
    private String description;
    private Boolean isLocked;
    private Integer attemptsCount;
    private String start;
    private String end;
    private Boolean hasStarted;
    public Long videoId;
    public Long attachmentId;
    public Long examId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ContentDao myDao;

    @ToOne(joinProperty = "videoId")
    public Video video;

    @Generated
    private transient Long video__resolvedKey;

    @ToOne(joinProperty = "attachmentId")
    public Attachment attachment;

    @Generated
    private transient Long attachment__resolvedKey;

    @ToOne(joinProperty = "examId")
    public Exam exam;

    @Generated
    private transient Long exam__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Content() {
    }

    public Content(Long id) {
        this.id = id;
    }

    @Generated
    public Content(Integer order, String htmlContentTitle, String htmlContentUrl, String url, String attemptsUrl, Integer chapterId, String chapterSlug, String chapterUrl, Long id, String name, String image, String description, Boolean isLocked, Integer attemptsCount, String start, String end, Boolean hasStarted, Long videoId, Long attachmentId, Long examId) {
        this.order = order;
        this.htmlContentTitle = htmlContentTitle;
        this.htmlContentUrl = htmlContentUrl;
        this.url = url;
        this.attemptsUrl = attemptsUrl;
        this.chapterId = chapterId;
        this.chapterSlug = chapterSlug;
        this.chapterUrl = chapterUrl;
        this.id = id;
        this.name = name;
        this.image = image;
        this.description = description;
        this.isLocked = isLocked;
        this.attemptsCount = attemptsCount;
        this.start = start;
        this.end = end;
        this.hasStarted = hasStarted;
        this.videoId = videoId;
        this.attachmentId = attachmentId;
        this.examId = examId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContentDao() : null;
    }

    public Integer getOrder() {
        return order;
    }

    public void setOrder(Integer order) {
        this.order = order;
    }

    public String getHtmlContentTitle() {
        return htmlContentTitle;
    }

    public void setHtmlContentTitle(String htmlContentTitle) {
        this.htmlContentTitle = htmlContentTitle;
    }

    public String getHtmlContentUrl() {
        return htmlContentUrl;
    }

    public void setHtmlContentUrl(String htmlContentUrl) {
        this.htmlContentUrl = htmlContentUrl;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getAttemptsUrl() {
        return attemptsUrl;
    }

    public void setAttemptsUrl(String attemptsUrl) {
        this.attemptsUrl = attemptsUrl;
    }

    public Integer getChapterId() {
        return chapterId;
    }

    public void setChapterId(Integer chapterId) {
        this.chapterId = chapterId;
    }

    public String getChapterSlug() {
        return chapterSlug;
    }

    public void setChapterSlug(String chapterSlug) {
        this.chapterSlug = chapterSlug;
    }

    public String getChapterUrl() {
        return chapterUrl;
    }

    public void setChapterUrl(String chapterUrl) {
        this.chapterUrl = chapterUrl;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Boolean getIsLocked() {
        return isLocked;
    }

    public void setIsLocked(Boolean isLocked) {
        this.isLocked = isLocked;
    }

    public Integer getAttemptsCount() {
        return attemptsCount;
    }

    public void setAttemptsCount(Integer attemptsCount) {
        this.attemptsCount = attemptsCount;
    }

    public String getStart() {
        return start;
    }

    public void setStart(String start) {
        this.start = start;
    }

    public String getEnd() {
        return end;
    }

    public void setEnd(String end) {
        this.end = end;
    }

    public Boolean getHasStarted() {
        return hasStarted;
    }

    public void setHasStarted(Boolean hasStarted) {
        this.hasStarted = hasStarted;
    }

    public Long getVideoId() {
        return videoId;
    }

    public void setVideoId(Long videoId) {
        this.videoId = videoId;
    }

    public Long getAttachmentId() {
        return attachmentId;
    }

    public void setAttachmentId(Long attachmentId) {
        this.attachmentId = attachmentId;
    }

    public Long getExamId() {
        return examId;
    }

    public void setExamId(Long examId) {
        this.examId = examId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Video getVideo() {
        Long __key = this.videoId;
        if (video__resolvedKey == null || !video__resolvedKey.equals(__key)) {
            __throwIfDetached();
            VideoDao targetDao = daoSession.getVideoDao();
            Video videoNew = targetDao.load(__key);
            synchronized (this) {
                video = videoNew;
            	video__resolvedKey = __key;
            }
        }
        return video;
    }

    @Generated
    public void setVideo(Video video) {
        synchronized (this) {
            this.video = video;
            videoId = video == null ? null : video.getId();
            video__resolvedKey = videoId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Attachment getAttachment() {
        Long __key = this.attachmentId;
        if (attachment__resolvedKey == null || !attachment__resolvedKey.equals(__key)) {
            __throwIfDetached();
            AttachmentDao targetDao = daoSession.getAttachmentDao();
            Attachment attachmentNew = targetDao.load(__key);
            synchronized (this) {
                attachment = attachmentNew;
            	attachment__resolvedKey = __key;
            }
        }
        return attachment;
    }

    @Generated
    public void setAttachment(Attachment attachment) {
        synchronized (this) {
            this.attachment = attachment;
            attachmentId = attachment == null ? null : attachment.getId();
            attachment__resolvedKey = attachmentId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Exam getExam() {
        Long __key = this.examId;
        if (exam__resolvedKey == null || !exam__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ExamDao targetDao = daoSession.getExamDao();
            Exam examNew = targetDao.load(__key);
            synchronized (this) {
                exam = examNew;
            	exam__resolvedKey = __key;
            }
        }
        return exam;
    }

    @Generated
    public void setExam(Exam exam) {
        synchronized (this) {
            this.exam = exam;
            examId = exam == null ? null : exam.getId();
            exam__resolvedKey = examId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    protected Content(Parcel in) {
        order = in.readByte() == 0x00 ? null : in.readInt();
        htmlContentTitle = in.readString();
        htmlContentUrl = in.readString();
        url = in.readString();
        attemptsUrl = in.readString();
        chapterId = in.readByte() == 0x00 ? null : in.readInt();
        chapterSlug = in.readString();
        chapterUrl = in.readString();
        id = in.readByte() == 0x00 ? null : in.readLong();
        name = in.readString();
        image = in.readString();
        description = in.readString();
        byte isLockedVal = in.readByte();
        isLocked = isLockedVal == 0x02 ? null : isLockedVal != 0x00;
        attemptsCount = in.readByte() == 0x00 ? null : in.readInt();
        start = in.readString();
        end = in.readString();
        byte hasStartedVal = in.readByte();
        hasStarted = hasStartedVal == 0x02 ? null : hasStartedVal != 0x00;
        videoId = in.readByte() == 0x00 ? null : in.readLong();
        attachmentId = in.readByte() == 0x00 ? null : in.readLong();
        examId = in.readByte() == 0x00 ? null : in.readLong();
        exam = (Exam) in.readValue(Exam.class.getClassLoader());
        attachment = (Attachment) in.readValue(Attachment.class.getClassLoader());
        video = (Video) in.readValue(Video.class.getClassLoader());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        if (order == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeInt(order);
        }
        dest.writeString(htmlContentTitle);
        dest.writeString(htmlContentUrl);
        dest.writeString(url);
        dest.writeString(attemptsUrl);
        if (chapterId == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeInt(chapterId);
        }
        dest.writeString(chapterSlug);
        dest.writeString(chapterUrl);
        if (id == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeLong(id);
        }
        dest.writeString(name);
        dest.writeString(image);
        dest.writeString(description);
        if (isLocked == null) {
            dest.writeByte((byte) (0x02));
        } else {
            dest.writeByte((byte) (isLocked ? 0x01 : 0x00));
        }
        if (attemptsCount == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeInt(attemptsCount);
        }
        dest.writeString(start);
        dest.writeString(end);
        if (hasStarted == null) {
            dest.writeByte((byte) (0x02));
        } else {
            dest.writeByte((byte) (hasStarted ? 0x01 : 0x00));
        }
        if (videoId == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeLong(videoId);
        }
        if (attachmentId == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeLong(attachmentId);
        }
        if (examId == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeLong(examId);
        }
        dest.writeValue(exam);
        dest.writeValue(attachment);
        dest.writeValue(video);
    }

    @SuppressWarnings("unused")
    public static final Parcelable.Creator<Content> CREATOR = new Parcelable.Creator<Content>() {
        @Override
        public Content createFromParcel(Parcel in) {
            return new Content(in);
        }

        @Override
        public Content[] newArray(int size) {
            return new Content[size];
        }
    };
    // KEEP METHODS END

}
