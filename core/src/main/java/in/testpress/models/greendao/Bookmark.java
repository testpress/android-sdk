package in.testpress.models.greendao;

import org.greenrobot.greendao.annotation.*;

import in.testpress.models.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.List;

import android.content.Context;

import in.testpress.core.TestpressSDKDatabase;

import org.greenrobot.greendao.query.QueryBuilder;

import static in.testpress.models.greendao.BookmarkFolder.UNCATEGORIZED;
// KEEP INCLUDES END

/**
 * Entity mapped to table "BOOKMARK".
 */
@Entity(active = true)
public class Bookmark {

    @Id
    private Long id;
    private String folder;
    private Long folderId;
    private Long objectId;
    private String modified;
    private Long modifiedDate;
    private String created;
    private Long createdDate;
    private Boolean loadedInAllFolder;
    private Boolean loadedInRespectiveFolder;
    private Boolean active;
    private Long contentTypeId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient BookmarkDao myDao;

    @ToOne(joinProperty = "contentTypeId")
    private ContentType contentType;

    @Generated
    private transient Long contentType__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Bookmark() {
    }

    public Bookmark(Long id) {
        this.id = id;
    }

    @Generated
    public Bookmark(Long id, String folder, Long folderId, Long objectId, String modified, Long modifiedDate, String created, Long createdDate, Boolean loadedInAllFolder, Boolean loadedInRespectiveFolder, Boolean active, Long contentTypeId) {
        this.id = id;
        this.folder = folder;
        this.folderId = folderId;
        this.objectId = objectId;
        this.modified = modified;
        this.modifiedDate = modifiedDate;
        this.created = created;
        this.createdDate = createdDate;
        this.loadedInAllFolder = loadedInAllFolder;
        this.loadedInRespectiveFolder = loadedInRespectiveFolder;
        this.active = active;
        this.contentTypeId = contentTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBookmarkDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFolder() {
        return folder;
    }

    public void setFolder(String folder) {
        this.folder = folder;
    }

    public Long getFolderId() {
        return folderId;
    }

    public void setFolderId(Long folderId) {
        this.folderId = folderId;
    }

    public Long getObjectId() {
        return objectId;
    }

    public void setObjectId(Long objectId) {
        this.objectId = objectId;
    }

    public String getModified() {
        return modified;
    }

    public void setModified(String modified) {
        this.modified = modified;
    }

    public Long getModifiedDate() {
        return modifiedDate;
    }

    public void setModifiedDate(Long modifiedDate) {
        this.modifiedDate = modifiedDate;
    }

    public String getCreated() {
        return created;
    }

    public void setCreated(String created) {
        this.created = created;
    }

    public Long getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(Long createdDate) {
        this.createdDate = createdDate;
    }

    public Boolean getLoadedInAllFolder() {
        return loadedInAllFolder;
    }

    public void setLoadedInAllFolder(Boolean loadedInAllFolder) {
        this.loadedInAllFolder = loadedInAllFolder;
    }

    public Boolean getLoadedInRespectiveFolder() {
        return loadedInRespectiveFolder;
    }

    public void setLoadedInRespectiveFolder(Boolean loadedInRespectiveFolder) {
        this.loadedInRespectiveFolder = loadedInRespectiveFolder;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Long getContentTypeId() {
        return contentTypeId;
    }

    public void setContentTypeId(Long contentTypeId) {
        this.contentTypeId = contentTypeId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public ContentType getContentType() {
        Long __key = this.contentTypeId;
        if (contentType__resolvedKey == null || !contentType__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ContentTypeDao targetDao = daoSession.getContentTypeDao();
            ContentType contentTypeNew = targetDao.load(__key);
            synchronized (this) {
                contentType = contentTypeNew;
            	contentType__resolvedKey = __key;
            }
        }
        return contentType;
    }

    @Generated
    public void setContentType(ContentType contentType) {
        synchronized (this) {
            this.contentType = contentType;
            contentTypeId = contentType == null ? null : contentType.getId();
            contentType__resolvedKey = contentTypeId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    public static void save(Context context, List<Bookmark> bookmarks, boolean allFolders) {
        BookmarkDao bookmarkDao = TestpressSDKDatabase.getBookmarkDao(context);
        for (int i = 0; i < bookmarks.size(); i++) {
            Bookmark bookmark = bookmarks.get(i);
            List<Bookmark> bookmarksFromDB = bookmarkDao.queryBuilder()
                    .where(BookmarkDao.Properties.Id.eq(bookmark.getId())).list();
            if (!bookmarksFromDB.isEmpty()) {
                Bookmark bookmarkFromDB = bookmarksFromDB.get(0);
                bookmarkFromDB.setActive(bookmark.getActive());
                bookmarkFromDB.setModified(bookmark.getModified());
                bookmarkFromDB.setModifiedDate(bookmark.getModifiedDate());
                bookmark = bookmarkFromDB;
            }
            if (allFolders) {
                bookmark.setLoadedInAllFolder(true);
            } else {
                bookmark.setLoadedInRespectiveFolder(true);
            }
            bookmarkDao.insertOrReplace(bookmark);
        }
    }

    public Object getBookmarkedObject() {
        switch (getContentType().getModel()) {
            case "userselectedanswer":
                List<ReviewItem> reviewItems = daoSession.getReviewItemDao().queryBuilder()
                        .where(ReviewItemDao.Properties.Id.eq(getObjectId())).list();

                if (reviewItems.isEmpty()) {
                    return null;
                }
                return reviewItems.get(0);
            case "chaptercontent":
                List<Content> contents = daoSession.getContentDao().queryBuilder()
                        .where(ContentDao.Properties.Id.eq(getObjectId())).list();

                if (contents.isEmpty()) {
                    return null;
                }
                return contents.get(0);
            default:
                return null;
        }
    }

    public String getFolderFromDB() {
        if (folder != null || folderId == null) {
            return folder;
        }
        List<BookmarkFolder> folders = daoSession.getBookmarkFolderDao().queryBuilder()
                .where(BookmarkFolderDao.Properties.Id.eq(folderId)).list();

        if (folders.isEmpty()) {
            return null;
        }
        return folders.get(0).getName();
    }

    public static QueryBuilder<Bookmark> getQueryBuilder(Context context, String currentFolder) {
        BookmarkDao bookmarkDao = TestpressSDKDatabase.getBookmarkDao(context);
        QueryBuilder<Bookmark> queryBuilder = bookmarkDao.queryBuilder();
        if (currentFolder.equals(UNCATEGORIZED)) {
            queryBuilder.where(BookmarkDao.Properties.LoadedInRespectiveFolder.eq(true));
            queryBuilder.where(BookmarkDao.Properties.FolderId.isNull());
        } else if (!currentFolder.isEmpty()) {
            queryBuilder.where(BookmarkDao.Properties.LoadedInRespectiveFolder.eq(true));
            queryBuilder
                    .join(BookmarkDao.Properties.FolderId, BookmarkFolder.class)
                    .where(BookmarkFolderDao.Properties.Name.eq(currentFolder));
        } else {
            queryBuilder.where(BookmarkDao.Properties.LoadedInAllFolder.eq(true));
        }
        return queryBuilder;
    }

    public static QueryBuilder<Bookmark> getQueryBuilderToDisplay(Context context,
                                                                  String currentFolder) {

        BookmarkDao bookmarkDao = TestpressSDKDatabase.getBookmarkDao(context);
        QueryBuilder<Bookmark> queryBuilder = bookmarkDao.queryBuilder()
                .orderDesc(BookmarkDao.Properties.CreatedDate);

        queryBuilder.where(BookmarkDao.Properties.Active.eq(true));
        if (currentFolder.equals(UNCATEGORIZED)) {
            queryBuilder.where(BookmarkDao.Properties.FolderId.isNull());
        } else if (!currentFolder.isEmpty()) {
            queryBuilder
                    .join(BookmarkDao.Properties.FolderId, BookmarkFolder.class)
                    .where(BookmarkFolderDao.Properties.Name.eq(currentFolder));
        }
        QueryBuilder<Bookmark> queryBuilderToLoadItems = getQueryBuilder(context, currentFolder);
        if (queryBuilderToLoadItems.count() > 0) {
            Bookmark lastBookmark = queryBuilderToLoadItems
                    .orderDesc(BookmarkDao.Properties.CreatedDate)
                    .list().get((int) queryBuilderToLoadItems.count() - 1);

            queryBuilder.where(BookmarkDao.Properties.CreatedDate.ge(lastBookmark.getCreatedDate()));
        }
        return queryBuilder;
    }
    // KEEP METHODS END

}
