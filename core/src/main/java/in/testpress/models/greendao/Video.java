package in.testpress.models.greendao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import in.testpress.models.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.os.Parcel;
import android.os.Parcelable;
// KEEP INCLUDES END

/**
 * Entity mapped to table "VIDEO".
 */
@Entity(active = true)
public class Video implements android.os.Parcelable {
    private String title;
    private String url;

    @Id
    private Long id;
    private String embedCode;
    private String duration;
    private Boolean isDomainRestricted;
    private String thumbnail;
    private String thumbnailMedium;
    private String thumbnailSmall;
    private Long streamId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient VideoDao myDao;

    @ToOne(joinProperty = "streamId")
    private Stream stream;

    @Generated
    private transient Long stream__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "videoId")
    })
    private List<Stream> streams;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Video() {
    }

    public Video(Long id) {
        this.id = id;
    }

    @Generated
    public Video(String title, String url, Long id, String embedCode, String duration, Boolean isDomainRestricted, String thumbnail, String thumbnailMedium, String thumbnailSmall, Long streamId) {
        this.title = title;
        this.url = url;
        this.id = id;
        this.embedCode = embedCode;
        this.duration = duration;
        this.isDomainRestricted = isDomainRestricted;
        this.thumbnail = thumbnail;
        this.thumbnailMedium = thumbnailMedium;
        this.thumbnailSmall = thumbnailSmall;
        this.streamId = streamId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVideoDao() : null;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getEmbedCode() {
        return embedCode;
    }

    public void setEmbedCode(String embedCode) {
        this.embedCode = embedCode;
    }

    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public Boolean getIsDomainRestricted() {
        return isDomainRestricted;
    }

    public void setIsDomainRestricted(Boolean isDomainRestricted) {
        this.isDomainRestricted = isDomainRestricted;
    }

    public String getThumbnail() {
        return thumbnail;
    }

    public void setThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
    }

    public String getThumbnailMedium() {
        return thumbnailMedium;
    }

    public void setThumbnailMedium(String thumbnailMedium) {
        this.thumbnailMedium = thumbnailMedium;
    }

    public String getThumbnailSmall() {
        return thumbnailSmall;
    }

    public void setThumbnailSmall(String thumbnailSmall) {
        this.thumbnailSmall = thumbnailSmall;
    }

    public Long getStreamId() {
        return streamId;
    }

    public void setStreamId(Long streamId) {
        this.streamId = streamId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Stream getStream() {
        Long __key = this.streamId;
        if (stream__resolvedKey == null || !stream__resolvedKey.equals(__key)) {
            __throwIfDetached();
            StreamDao targetDao = daoSession.getStreamDao();
            Stream streamNew = targetDao.load(__key);
            synchronized (this) {
                stream = streamNew;
            	stream__resolvedKey = __key;
            }
        }
        return stream;
    }

    @Generated
    public void setStream(Stream stream) {
        synchronized (this) {
            this.stream = stream;
            streamId = stream == null ? null : stream.getId();
            stream__resolvedKey = streamId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Stream> getStreams() {
        if (streams == null) {
            __throwIfDetached();
            StreamDao targetDao = daoSession.getStreamDao();
            List<Stream> streamsNew = targetDao._queryVideo_Streams(id);
            synchronized (this) {
                if(streams == null) {
                    streams = streamsNew;
                }
            }
        }
        return streams;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetStreams() {
        streams = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    protected Video(Parcel in) {
        title = in.readString();
        url = in.readString();
        id = in.readByte() == 0x00 ? null : in.readLong();
        embedCode = in.readString();
    }

    public String getHlsUrl() {
        if (this.getStreams() != null) {
            for (Stream stream : this.getStreams()) {
                if (stream.getFormat().equals("HLS")) {
                    return stream.getUrl();
                }
            }
        }

        return this.url;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(title);
        dest.writeString(url);
        if (id == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeLong(id);
        }
        dest.writeString(embedCode);
    }

    @SuppressWarnings("unused")
    public static final Parcelable.Creator<Video> CREATOR = new Parcelable.Creator<Video>() {
        @Override
        public Video createFromParcel(Parcel in) {
            return new Video(in);
        }

        @Override
        public Video[] newArray(int size) {
            return new Video[size];
        }
    };

    public List<Stream> getRawStreams() {
        if (myDao == null || streams != null) {
            return streams;
        }
        return getStreams();
    }
    // KEEP METHODS END

}
