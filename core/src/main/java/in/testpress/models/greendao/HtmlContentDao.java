package in.testpress.models.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HTML_CONTENT".
*/
public class HtmlContentDao extends AbstractDao<HtmlContent, Void> {

    public static final String TABLENAME = "HTML_CONTENT";

    /**
     * Properties of entity HtmlContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property TextHtml = new Property(1, String.class, "textHtml", false, "TEXT_HTML");
        public final static Property SourceUrl = new Property(2, String.class, "sourceUrl", false, "SOURCE_URL");
    }


    public HtmlContentDao(DaoConfig config) {
        super(config);
    }
    
    public HtmlContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HTML_CONTENT\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"TEXT_HTML\" TEXT," + // 1: textHtml
                "\"SOURCE_URL\" TEXT);"); // 2: sourceUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HTML_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HtmlContent entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String textHtml = entity.getTextHtml();
        if (textHtml != null) {
            stmt.bindString(2, textHtml);
        }
 
        String sourceUrl = entity.getSourceUrl();
        if (sourceUrl != null) {
            stmt.bindString(3, sourceUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HtmlContent entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String textHtml = entity.getTextHtml();
        if (textHtml != null) {
            stmt.bindString(2, textHtml);
        }
 
        String sourceUrl = entity.getSourceUrl();
        if (sourceUrl != null) {
            stmt.bindString(3, sourceUrl);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HtmlContent readEntity(Cursor cursor, int offset) {
        HtmlContent entity = new HtmlContent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // textHtml
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // sourceUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HtmlContent entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTextHtml(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSourceUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HtmlContent entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HtmlContent entity) {
        return null;
    }

    @Override
    public boolean hasKey(HtmlContent entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
