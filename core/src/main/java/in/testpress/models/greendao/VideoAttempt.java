package in.testpress.models.greendao;

import org.greenrobot.greendao.annotation.*;

import in.testpress.models.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "VIDEO_ATTEMPT".
 */
@Entity(active = true)
public class VideoAttempt {

    @Id
    private Long id;
    private String lastPosition;
    private Integer state;
    private String watchedDuration;
    private Long videoContentId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient VideoAttemptDao myDao;

    @ToOne(joinProperty = "videoContentId")
    private Video videoContent;

    @Generated
    private transient Long videoContent__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public VideoAttempt() {
    }

    public VideoAttempt(Long id) {
        this.id = id;
    }

    @Generated
    public VideoAttempt(Long id, String lastPosition, Integer state, String watchedDuration, Long videoContentId) {
        this.id = id;
        this.lastPosition = lastPosition;
        this.state = state;
        this.watchedDuration = watchedDuration;
        this.videoContentId = videoContentId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVideoAttemptDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLastPosition() {
        return lastPosition;
    }

    public void setLastPosition(String lastPosition) {
        this.lastPosition = lastPosition;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public String getWatchedDuration() {
        return watchedDuration;
    }

    public void setWatchedDuration(String watchedDuration) {
        this.watchedDuration = watchedDuration;
    }

    public Long getVideoContentId() {
        return videoContentId;
    }

    public void setVideoContentId(Long videoContentId) {
        this.videoContentId = videoContentId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Video getVideoContent() {
        Long __key = this.videoContentId;
        if (videoContent__resolvedKey == null || !videoContent__resolvedKey.equals(__key)) {
            __throwIfDetached();
            VideoDao targetDao = daoSession.getVideoDao();
            Video videoContentNew = targetDao.load(__key);
            synchronized (this) {
                videoContent = videoContentNew;
            	videoContent__resolvedKey = __key;
            }
        }
        return videoContent;
    }

    @Generated
    public void setVideoContent(Video videoContent) {
        synchronized (this) {
            this.videoContent = videoContent;
            videoContentId = videoContent == null ? null : videoContent.getId();
            videoContent__resolvedKey = videoContentId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here

    public Video getRawVideoContent() {
        if (myDao == null || videoContent != null) {
            return videoContent;
        }
        return getVideoContent();
    }
    // KEEP METHODS END

}
