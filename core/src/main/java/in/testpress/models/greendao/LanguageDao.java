package in.testpress.models.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LANGUAGE".
*/
public class LanguageDao extends AbstractDao<Language, Long> {

    public static final String TABLENAME = "LANGUAGE";

    /**
     * Properties of entity Language.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Exam_slug = new Property(3, String.class, "exam_slug", false, "EXAM_SLUG");
        public final static Property ExamId = new Property(4, Long.class, "examId", false, "EXAM_ID");
    }

    private Query<Language> exam_LanguagesQuery;

    public LanguageDao(DaoConfig config) {
        super(config);
    }
    
    public LanguageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LANGUAGE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"TITLE\" TEXT," + // 2: title
                "\"EXAM_SLUG\" TEXT," + // 3: exam_slug
                "\"EXAM_ID\" INTEGER);"); // 4: examId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LANGUAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Language entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String exam_slug = entity.getExam_slug();
        if (exam_slug != null) {
            stmt.bindString(4, exam_slug);
        }
 
        Long examId = entity.getExamId();
        if (examId != null) {
            stmt.bindLong(5, examId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Language entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String exam_slug = entity.getExam_slug();
        if (exam_slug != null) {
            stmt.bindString(4, exam_slug);
        }
 
        Long examId = entity.getExamId();
        if (examId != null) {
            stmt.bindLong(5, examId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Language readEntity(Cursor cursor, int offset) {
        Language entity = new Language( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // exam_slug
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // examId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Language entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExam_slug(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExamId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Language entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Language entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Language entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "languages" to-many relationship of Exam. */
    public List<Language> _queryExam_Languages(Long examId) {
        synchronized (this) {
            if (exam_LanguagesQuery == null) {
                QueryBuilder<Language> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ExamId.eq(null));
                exam_LanguagesQuery = queryBuilder.build();
            }
        }
        Query<Language> query = exam_LanguagesQuery.forCurrentThread();
        query.setParameter(0, examId);
        return query.list();
    }

}
