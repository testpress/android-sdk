package in.testpress.models.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STREAM".
*/
public class StreamDao extends AbstractDao<Stream, Long> {

    public static final String TABLENAME = "STREAM";

    /**
     * Properties of entity Stream.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Format = new Property(1, String.class, "format", false, "FORMAT");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property HlsUrl = new Property(3, String.class, "hlsUrl", false, "HLS_URL");
        public final static Property DashUrl = new Property(4, String.class, "dashUrl", false, "DASH_URL");
        public final static Property VideoId = new Property(5, Long.class, "videoId", false, "VIDEO_ID");
    }

    private Query<Stream> video_StreamsQuery;

    public StreamDao(DaoConfig config) {
        super(config);
    }
    
    public StreamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STREAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FORMAT\" TEXT," + // 1: format
                "\"URL\" TEXT," + // 2: url
                "\"HLS_URL\" TEXT," + // 3: hlsUrl
                "\"DASH_URL\" TEXT," + // 4: dashUrl
                "\"VIDEO_ID\" INTEGER);"); // 5: videoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STREAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Stream entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(2, format);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String hlsUrl = entity.getHlsUrl();
        if (hlsUrl != null) {
            stmt.bindString(4, hlsUrl);
        }
 
        String dashUrl = entity.getDashUrl();
        if (dashUrl != null) {
            stmt.bindString(5, dashUrl);
        }
 
        Long videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindLong(6, videoId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Stream entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(2, format);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String hlsUrl = entity.getHlsUrl();
        if (hlsUrl != null) {
            stmt.bindString(4, hlsUrl);
        }
 
        String dashUrl = entity.getDashUrl();
        if (dashUrl != null) {
            stmt.bindString(5, dashUrl);
        }
 
        Long videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindLong(6, videoId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Stream readEntity(Cursor cursor, int offset) {
        Stream entity = new Stream( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // format
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hlsUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dashUrl
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // videoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Stream entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFormat(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHlsUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDashUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Stream entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Stream entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Stream entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "streams" to-many relationship of Video. */
    public List<Stream> _queryVideo_Streams(Long videoId) {
        synchronized (this) {
            if (video_StreamsQuery == null) {
                QueryBuilder<Stream> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.VideoId.eq(null));
                video_StreamsQuery = queryBuilder.build();
            }
        }
        Query<Stream> query = video_StreamsQuery.forCurrentThread();
        query.setParameter(0, videoId);
        return query.list();
    }

}
