package in.testpress.models.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_UPLOADED_FILE".
*/
public class UserUploadedFileDao extends AbstractDao<UserUploadedFile, Long> {

    public static final String TABLENAME = "USER_UPLOADED_FILE";

    /**
     * Properties of entity UserUploadedFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Path = new Property(1, String.class, "path", false, "PATH");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property ReviewItemId = new Property(3, Long.class, "reviewItemId", false, "REVIEW_ITEM_ID");
    }

    private Query<UserUploadedFile> reviewItem_FilesQuery;

    public UserUploadedFileDao(DaoConfig config) {
        super(config);
    }
    
    public UserUploadedFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_UPLOADED_FILE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PATH\" TEXT," + // 1: path
                "\"URL\" TEXT," + // 2: url
                "\"REVIEW_ITEM_ID\" INTEGER);"); // 3: reviewItemId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_UPLOADED_FILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserUploadedFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        Long reviewItemId = entity.getReviewItemId();
        if (reviewItemId != null) {
            stmt.bindLong(4, reviewItemId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserUploadedFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        Long reviewItemId = entity.getReviewItemId();
        if (reviewItemId != null) {
            stmt.bindLong(4, reviewItemId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserUploadedFile readEntity(Cursor cursor, int offset) {
        UserUploadedFile entity = new UserUploadedFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // path
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // reviewItemId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserUploadedFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReviewItemId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserUploadedFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserUploadedFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserUploadedFile entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "files" to-many relationship of ReviewItem. */
    public List<UserUploadedFile> _queryReviewItem_Files(Long reviewItemId) {
        synchronized (this) {
            if (reviewItem_FilesQuery == null) {
                QueryBuilder<UserUploadedFile> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ReviewItemId.eq(null));
                reviewItem_FilesQuery = queryBuilder.build();
            }
        }
        Query<UserUploadedFile> query = reviewItem_FilesQuery.forCurrentThread();
        query.setParameter(0, reviewItemId);
        return query.list();
    }

}
