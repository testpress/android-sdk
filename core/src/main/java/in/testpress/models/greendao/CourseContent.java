package in.testpress.models.greendao;

import org.greenrobot.greendao.annotation.*;

import in.testpress.models.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.os.Parcel;
import android.os.Parcelable;
// KEEP INCLUDES END

/**
 * Entity mapped to table "COURSE_CONTENT".
 */
@Entity(active = true)
public class CourseContent implements android.os.Parcelable {

    @Id
    private Long id;
    private String attemptsUrl;
    private Long examId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CourseContentDao myDao;

    @ToOne(joinProperty = "examId")
    public Exam exam;

    @Generated
    private transient Long exam__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public CourseContent() {
    }

    public CourseContent(Long id) {
        this.id = id;
    }

    @Generated
    public CourseContent(Long id, String attemptsUrl, Long examId) {
        this.id = id;
        this.attemptsUrl = attemptsUrl;
        this.examId = examId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCourseContentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getAttemptsUrl() {
        return attemptsUrl;
    }

    public void setAttemptsUrl(String attemptsUrl) {
        this.attemptsUrl = attemptsUrl;
    }

    public Long getExamId() {
        return examId;
    }

    public void setExamId(Long examId) {
        this.examId = examId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Exam getExam() {
        Long __key = this.examId;
        if (exam__resolvedKey == null || !exam__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ExamDao targetDao = daoSession.getExamDao();
            Exam examNew = targetDao.load(__key);
            synchronized (this) {
                exam = examNew;
            	exam__resolvedKey = __key;
            }
        }
        return exam;
    }

    @Generated
    public void setExam(Exam exam) {
        synchronized (this) {
            this.exam = exam;
            examId = exam == null ? null : exam.getId();
            exam__resolvedKey = examId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here

    protected CourseContent(Parcel in) {
        id = in.readByte() == 0x00 ? null : in.readLong();
        attemptsUrl = in.readString();
        examId = in.readByte() == 0x00 ? null : in.readLong();
        exam = (Exam) in.readValue(Exam.class.getClassLoader());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        if (id == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeLong(id);
        }
        dest.writeString(attemptsUrl);
        if (examId == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeLong(examId);
        }
        dest.writeValue(exam);
    }

    @SuppressWarnings("unused")
    public static final Parcelable.Creator<CourseContent> CREATOR = new Parcelable.Creator<CourseContent>() {
        @Override
        public CourseContent createFromParcel(Parcel in) {
            return new CourseContent(in);
        }

        @Override
        public CourseContent[] newArray(int size) {
            return new CourseContent[size];
        }
    };


    public CourseContent(String attemptsUrl, Exam exam) {
        this.attemptsUrl = attemptsUrl;
        this.exam = exam;
    }
    // KEEP METHODS END

}
