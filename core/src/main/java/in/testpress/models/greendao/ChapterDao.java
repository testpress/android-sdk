package in.testpress.models.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER".
*/
public class ChapterDao extends AbstractDao<Chapter, Long> {

    public static final String TABLENAME = "CHAPTER";

    /**
     * Properties of entity Chapter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Slug = new Property(3, String.class, "slug", false, "SLUG");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Modified = new Property(5, String.class, "modified", false, "MODIFIED");
        public final static Property ModifiedDate = new Property(6, Long.class, "modifiedDate", false, "MODIFIED_DATE");
        public final static Property CourseUrl = new Property(7, String.class, "courseUrl", false, "COURSE_URL");
        public final static Property ContentUrl = new Property(8, String.class, "contentUrl", false, "CONTENT_URL");
        public final static Property ChildrenUrl = new Property(9, String.class, "childrenUrl", false, "CHILDREN_URL");
        public final static Property ParentSlug = new Property(10, String.class, "parentSlug", false, "PARENT_SLUG");
        public final static Property ParentUrl = new Property(11, String.class, "parentUrl", false, "PARENT_URL");
        public final static Property Leaf = new Property(12, Boolean.class, "leaf", false, "LEAF");
        public final static Property Url = new Property(13, String.class, "url", false, "URL");
        public final static Property RequiredTrophyCount = new Property(14, Integer.class, "requiredTrophyCount", false, "REQUIRED_TROPHY_COUNT");
        public final static Property IsLocked = new Property(15, Boolean.class, "isLocked", false, "IS_LOCKED");
        public final static Property ContentsCount = new Property(16, Integer.class, "contentsCount", false, "CONTENTS_COUNT");
        public final static Property ChildrenCount = new Property(17, Integer.class, "childrenCount", false, "CHILDREN_COUNT");
        public final static Property Active = new Property(18, Boolean.class, "active", false, "ACTIVE");
        public final static Property Order = new Property(19, Integer.class, "order", false, "ORDER");
        public final static Property CourseId = new Property(20, Long.class, "courseId", false, "COURSE_ID");
        public final static Property ParentId = new Property(21, Long.class, "parentId", false, "PARENT_ID");
    }

    private DaoSession daoSession;

    private Query<Chapter> course_ChaptersQuery;
    private Query<Chapter> chapter_ChildrenQuery;

    public ChapterDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"SLUG\" TEXT," + // 3: slug
                "\"IMAGE\" TEXT," + // 4: image
                "\"MODIFIED\" TEXT," + // 5: modified
                "\"MODIFIED_DATE\" INTEGER," + // 6: modifiedDate
                "\"COURSE_URL\" TEXT," + // 7: courseUrl
                "\"CONTENT_URL\" TEXT," + // 8: contentUrl
                "\"CHILDREN_URL\" TEXT," + // 9: childrenUrl
                "\"PARENT_SLUG\" TEXT," + // 10: parentSlug
                "\"PARENT_URL\" TEXT," + // 11: parentUrl
                "\"LEAF\" INTEGER," + // 12: leaf
                "\"URL\" TEXT," + // 13: url
                "\"REQUIRED_TROPHY_COUNT\" INTEGER," + // 14: requiredTrophyCount
                "\"IS_LOCKED\" INTEGER," + // 15: isLocked
                "\"CONTENTS_COUNT\" INTEGER," + // 16: contentsCount
                "\"CHILDREN_COUNT\" INTEGER," + // 17: childrenCount
                "\"ACTIVE\" INTEGER," + // 18: active
                "\"ORDER\" INTEGER," + // 19: order
                "\"COURSE_ID\" INTEGER," + // 20: courseId
                "\"PARENT_ID\" INTEGER);"); // 21: parentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(4, slug);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String modified = entity.getModified();
        if (modified != null) {
            stmt.bindString(6, modified);
        }
 
        Long modifiedDate = entity.getModifiedDate();
        if (modifiedDate != null) {
            stmt.bindLong(7, modifiedDate);
        }
 
        String courseUrl = entity.getCourseUrl();
        if (courseUrl != null) {
            stmt.bindString(8, courseUrl);
        }
 
        String contentUrl = entity.getContentUrl();
        if (contentUrl != null) {
            stmt.bindString(9, contentUrl);
        }
 
        String childrenUrl = entity.getChildrenUrl();
        if (childrenUrl != null) {
            stmt.bindString(10, childrenUrl);
        }
 
        String parentSlug = entity.getParentSlug();
        if (parentSlug != null) {
            stmt.bindString(11, parentSlug);
        }
 
        String parentUrl = entity.getParentUrl();
        if (parentUrl != null) {
            stmt.bindString(12, parentUrl);
        }
 
        Boolean leaf = entity.getLeaf();
        if (leaf != null) {
            stmt.bindLong(13, leaf ? 1L: 0L);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(14, url);
        }
 
        Integer requiredTrophyCount = entity.getRequiredTrophyCount();
        if (requiredTrophyCount != null) {
            stmt.bindLong(15, requiredTrophyCount);
        }
 
        Boolean isLocked = entity.getIsLocked();
        if (isLocked != null) {
            stmt.bindLong(16, isLocked ? 1L: 0L);
        }
 
        Integer contentsCount = entity.getContentsCount();
        if (contentsCount != null) {
            stmt.bindLong(17, contentsCount);
        }
 
        Integer childrenCount = entity.getChildrenCount();
        if (childrenCount != null) {
            stmt.bindLong(18, childrenCount);
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(19, active ? 1L: 0L);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(20, order);
        }
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(21, courseId);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(22, parentId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(4, slug);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String modified = entity.getModified();
        if (modified != null) {
            stmt.bindString(6, modified);
        }
 
        Long modifiedDate = entity.getModifiedDate();
        if (modifiedDate != null) {
            stmt.bindLong(7, modifiedDate);
        }
 
        String courseUrl = entity.getCourseUrl();
        if (courseUrl != null) {
            stmt.bindString(8, courseUrl);
        }
 
        String contentUrl = entity.getContentUrl();
        if (contentUrl != null) {
            stmt.bindString(9, contentUrl);
        }
 
        String childrenUrl = entity.getChildrenUrl();
        if (childrenUrl != null) {
            stmt.bindString(10, childrenUrl);
        }
 
        String parentSlug = entity.getParentSlug();
        if (parentSlug != null) {
            stmt.bindString(11, parentSlug);
        }
 
        String parentUrl = entity.getParentUrl();
        if (parentUrl != null) {
            stmt.bindString(12, parentUrl);
        }
 
        Boolean leaf = entity.getLeaf();
        if (leaf != null) {
            stmt.bindLong(13, leaf ? 1L: 0L);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(14, url);
        }
 
        Integer requiredTrophyCount = entity.getRequiredTrophyCount();
        if (requiredTrophyCount != null) {
            stmt.bindLong(15, requiredTrophyCount);
        }
 
        Boolean isLocked = entity.getIsLocked();
        if (isLocked != null) {
            stmt.bindLong(16, isLocked ? 1L: 0L);
        }
 
        Integer contentsCount = entity.getContentsCount();
        if (contentsCount != null) {
            stmt.bindLong(17, contentsCount);
        }
 
        Integer childrenCount = entity.getChildrenCount();
        if (childrenCount != null) {
            stmt.bindLong(18, childrenCount);
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(19, active ? 1L: 0L);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(20, order);
        }
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(21, courseId);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(22, parentId);
        }
    }

    @Override
    protected final void attachEntity(Chapter entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Chapter readEntity(Cursor cursor, int offset) {
        Chapter entity = new Chapter( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // slug
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // modified
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // modifiedDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // courseUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // contentUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // childrenUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // parentSlug
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // parentUrl
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // leaf
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // url
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // requiredTrophyCount
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // isLocked
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // contentsCount
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // childrenCount
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // active
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // order
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // courseId
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21) // parentId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chapter entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSlug(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setModified(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setModifiedDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setCourseUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContentUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChildrenUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setParentSlug(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setParentUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLeaf(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRequiredTrophyCount(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setIsLocked(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setContentsCount(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setChildrenCount(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setActive(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setOrder(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setCourseId(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setParentId(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Chapter entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Chapter entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chapter entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chapters" to-many relationship of Course. */
    public List<Chapter> _queryCourse_Chapters(Long courseId) {
        synchronized (this) {
            if (course_ChaptersQuery == null) {
                QueryBuilder<Chapter> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CourseId.eq(null));
                queryBuilder.orderRaw("T.'ORDER' ASC");
                course_ChaptersQuery = queryBuilder.build();
            }
        }
        Query<Chapter> query = course_ChaptersQuery.forCurrentThread();
        query.setParameter(0, courseId);
        return query.list();
    }

    /** Internal query to resolve the "children" to-many relationship of Chapter. */
    public List<Chapter> _queryChapter_Children(Long parentId) {
        synchronized (this) {
            if (chapter_ChildrenQuery == null) {
                QueryBuilder<Chapter> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                queryBuilder.orderRaw("T.'ORDER' ASC");
                chapter_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<Chapter> query = chapter_ChildrenQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

}
