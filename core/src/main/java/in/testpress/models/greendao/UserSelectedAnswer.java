package in.testpress.models.greendao;

import org.greenrobot.greendao.annotation.*;

import in.testpress.models.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

import in.testpress.util.IntegerList;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "USER_SELECTED_ANSWER".
 */
@Entity(active = true)
public class UserSelectedAnswer {

    @Id
    private Long id;
    private Integer order;
    private Boolean review;
    private Long examId;
    private Long attemptId;
    private String explanationHtml;
    private String shortText;

    @Convert(converter = in.testpress.util.IntegerListConverter.class, columnType = String.class)
    private IntegerList selectedAnswers;

    @Convert(converter = in.testpress.util.IntegerListConverter.class, columnType = String.class)
    private IntegerList correctAnswers;
    private String url;
    private Long questionId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UserSelectedAnswerDao myDao;

    @ToOne(joinProperty = "questionId")
    private Question question;

    @Generated
    private transient Long question__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public UserSelectedAnswer() {
    }

    public UserSelectedAnswer(Long id) {
        this.id = id;
    }

    @Generated
    public UserSelectedAnswer(Long id, Integer order, Boolean review, Long examId, Long attemptId, String explanationHtml, String shortText, IntegerList selectedAnswers, IntegerList correctAnswers, String url, Long questionId) {
        this.id = id;
        this.order = order;
        this.review = review;
        this.examId = examId;
        this.attemptId = attemptId;
        this.explanationHtml = explanationHtml;
        this.shortText = shortText;
        this.selectedAnswers = selectedAnswers;
        this.correctAnswers = correctAnswers;
        this.url = url;
        this.questionId = questionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserSelectedAnswerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getOrder() {
        return order;
    }

    public void setOrder(Integer order) {
        this.order = order;
    }

    public Boolean getReview() {
        return review;
    }

    public void setReview(Boolean review) {
        this.review = review;
    }

    public Long getExamId() {
        return examId;
    }

    public void setExamId(Long examId) {
        this.examId = examId;
    }

    public Long getAttemptId() {
        return attemptId;
    }

    public void setAttemptId(Long attemptId) {
        this.attemptId = attemptId;
    }

    public String getExplanationHtml() {
        return explanationHtml;
    }

    public void setExplanationHtml(String explanationHtml) {
        this.explanationHtml = explanationHtml;
    }

    public String getShortText() {
        return shortText;
    }

    public void setShortText(String shortText) {
        this.shortText = shortText;
    }

    public IntegerList getSelectedAnswers() {
        return selectedAnswers;
    }

    public void setSelectedAnswers(IntegerList selectedAnswers) {
        this.selectedAnswers = selectedAnswers;
    }

    public IntegerList getCorrectAnswers() {
        return correctAnswers;
    }

    public void setCorrectAnswers(IntegerList correctAnswers) {
        this.correctAnswers = correctAnswers;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Long getQuestionId() {
        return questionId;
    }

    public void setQuestionId(Long questionId) {
        this.questionId = questionId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Question getQuestion() {
        Long __key = this.questionId;
        if (question__resolvedKey == null || !question__resolvedKey.equals(__key)) {
            __throwIfDetached();
            QuestionDao targetDao = daoSession.getQuestionDao();
            Question questionNew = targetDao.load(__key);
            synchronized (this) {
                question = questionNew;
            	question__resolvedKey = __key;
            }
        }
        return question;
    }

    @Generated
    public void setQuestion(Question question) {
        synchronized (this) {
            this.question = question;
            questionId = question == null ? null : question.getId();
            question__resolvedKey = questionId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
