package in.testpress.models.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIVE_STREAM".
*/
public class LiveStreamDao extends AbstractDao<LiveStream, Long> {

    public static final String TABLENAME = "LIVE_STREAM";

    /**
     * Properties of entity LiveStream.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property StreamURL = new Property(2, String.class, "streamURL", false, "STREAM_URL");
        public final static Property Duration = new Property(3, Integer.class, "duration", false, "DURATION");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property ShowRecordedVideo = new Property(5, Boolean.class, "showRecordedVideo", false, "SHOW_RECORDED_VIDEO");
    }


    public LiveStreamDao(DaoConfig config) {
        super(config);
    }
    
    public LiveStreamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIVE_STREAM\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"STREAM_URL\" TEXT," + // 2: streamURL
                "\"DURATION\" INTEGER," + // 3: duration
                "\"STATUS\" TEXT," + // 4: status
                "\"SHOW_RECORDED_VIDEO\" INTEGER);"); // 5: showRecordedVideo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIVE_STREAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LiveStream entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String streamURL = entity.getStreamURL();
        if (streamURL != null) {
            stmt.bindString(3, streamURL);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(4, duration);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        Boolean showRecordedVideo = entity.getShowRecordedVideo();
        if (showRecordedVideo != null) {
            stmt.bindLong(6, showRecordedVideo ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LiveStream entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String streamURL = entity.getStreamURL();
        if (streamURL != null) {
            stmt.bindString(3, streamURL);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(4, duration);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        Boolean showRecordedVideo = entity.getShowRecordedVideo();
        if (showRecordedVideo != null) {
            stmt.bindLong(6, showRecordedVideo ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LiveStream readEntity(Cursor cursor, int offset) {
        LiveStream entity = new LiveStream( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // streamURL
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // showRecordedVideo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LiveStream entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStreamURL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShowRecordedVideo(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LiveStream entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LiveStream entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LiveStream entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
